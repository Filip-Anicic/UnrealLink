name: create-release

on: 
  workflow_dispatch:
    inputs:
      release-major-version:
        description: 'Major version of release (e.g. 2020.1)'     
        required: true
        
      release-minor-version:
        description: 'Minor version of release (e.g. 55)'     
        required: true

      rider-version-since:
        description: 'Set earliest version of SDK that plugin compatible with (e.g. 202.6397).'
        required: true

      rider-version-until:
        description: 'Set latest version of SDK that plugin compatible with. Usually use the same as "since" version (e.g. 202.6397).'
        required: true

jobs:
  build:
    env:
      working-dir: ${{ github.workspace}}${{ matrix.config.SEP }}rd-cpp
      major-version: 2020.2
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest", artifact-prefix: "UnrealLink-",
            os: windows-latest,
            SEP: \
          }

    steps:
    - uses: actions/checkout@v2
    - name: Patch CHANGELOG.md
      run: gradlew.bat patchChangelog -PproductVersion=${{ github.event.inputs.release-major-version }} -PBuildCounter=${{ github.event.inputs.release-minor-version }}
      shell: cmd
    - name: Build Plugin
      run: gradlew.bat buildPlugin -PproductVersion=${{ github.event.inputs.release-major-version }} -PBuildCounter=${{ github.event.inputs.release-minor-version }} -PConfiguration=Release -PisReleaseBuild=true -PriderVersionSince=${{ github.event.inputs.rider-version-since }} -PriderVersionUntil=${{ github.event.inputs.rider-version-until }}
      shell: cmd
    - name: Create Release Notes file
      run: gradlew.bat dumpChangelogResult -PproductVersion=${{ github.event.inputs.release-major-version }} -PBuildCounter=${{ github.event.inputs.release-minor-version }}
      shell: cmd
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: v${{ github.event.inputs.release-major-version }}.${{ github.event.inputs.release-minor-version }}
        release_name: Release ${{ github.event.inputs.release-major-version }}.${{ github.event.inputs.release-minor-version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./output/UnrealLink-${{ github.event.inputs.release-major-version }}.${{ github.event.inputs.release-minor-version }}.zip
        asset_name: UnrealLink.zip
        asset_content_type: application/zip
    - name: setup git config
      run: |
        # setup the username and email. I tend to use 'GitHub Actions Bot' with no email by default
        git config user.name "GitHub Actions Bot"
        git config user.email "<>"
    - name: Commit patched CHANGELOG.md
      # [TODO]: Fix error code failure even though commit is successful
      continue-on-error: true
      run: |
        git add CHANGELOG.md
        git commit -m "Update CHANGELOG.md for Release"
        git push origin ${GITHUB_REF##*/}
