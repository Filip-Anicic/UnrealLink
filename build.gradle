import org.apache.tools.ant.taskdefs.condition.Os

buildscript {

    repositories {
        maven { url "https://cache-redirector.jetbrains.com/intellij-repository/snapshots" }
        maven { url "https://cache-redirector.jetbrains.com/maven-central" }
        maven { url "https://cache-redirector.jetbrains.com/dl.bintray.com/kotlin/kotlin-eap" }
    }


}
plugins {
    id 'java'
    id 'org.jetbrains.intellij'
    id 'com.jetbrains.rdgen' version '0.192.36'
    id 'org.jetbrains.kotlin.jvm' version '1.3.21'
}
dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}

ext {
    repoRoot = project.file(".")
    isWindows = Os.isFamily(Os.FAMILY_WINDOWS)
    sdkVersion = "2019.2"
    rdLibDirectory = new File(repoRoot, "build/riderRD-$sdkVersion-SNAPSHOT/lib/rd")
    reSharperHostSdkDirectory = new File(repoRoot, "build/riderRD-$sdkVersion-SNAPSHOT/lib/ReSharperHostSdk")
    dotNetDir = new File(repoRoot, "src/dotnet")
    pluginPropsFile = new File(dotNetDir, "Plugin.props")
    dotNetRootId = "ReSharperPlugin"
    dotNetPluginId = "${dotNetRootId}.UnrealEditor"
    dotNetSolutionId = "resharper_unreal"
    dotnetSolution = new File(repoRoot, "${dotNetSolutionId}.sln")
}

repositories {
    maven { url 'https://repo.labs.intellij.net/central-proxy' }
    maven { url 'https://repo.labs.intellij.net/rd-snapshots-maven' }
//  maven { url 'https://repo.labs.intellij.net/jitpack.io' }
//  mavenLocal()
    flatDir { dirs rdLibDirectory.absolutePath }
    mavenCentral()
}

wrapper {
    gradleVersion = '4.10'
    distributionType = Wrapper.DistributionType.ALL
    distributionUrl = "https://cache-redirector.jetbrains.com/services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

if (!ext.has("BuildConfiguration"))
    ext.BuildConfiguration = "Release"

if (ext.has("pluginVersion"))
    ext.version = ext.pluginVersion
else
    ext.version = "1.3.3.7"

if (ext.has("username"))
    intellij.publish.username = ext.username

if (ext.has("password"))
    intellij.publish.password = ext.password

version ext.version

sourceSets {
    main {
        java.srcDir 'src/rider/main/kotlin'
        resources.srcDir 'src/rider/main/resources'
    }
}

compileKotlin {
    kotlinOptions { jvmTarget = "1.8" }
}

task findMsBuild {
    doLast {
        ByteArrayOutputStream stdout = new ByteArrayOutputStream()
        if (isWindows) {
            ext.executable = "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\MSBuild\\Current\\Bin\\MSBuild.exe"
        } else {
            exec {
                executable 'which'
                args 'msbuild'
                standardOutput = stdout
                workingDir project.rootDir
            }
            ext.executable = stdout.toString().trim()
        }
    }
}

task patchPropsFile {
    def getFiles =  new FileNameFinder().getFileNames("$reSharperHostSdkDirectory", "JetBrains.Rider.SDK.*.nupkg")
    def riderSdkFile = getFiles.find { !it.contains('Test')}
    def versionGroup = (riderSdkFile =~ /JetBrains\.Rider\.SDK\.([\d.]+.*)\.nupkg/)
    assert versionGroup.hasGroup()
    assert 1L == versionGroup.size()
    def version = versionGroup[0][1]
    pluginPropsFile.text = """<Project>
  <PropertyGroup>
    <SdkVersion>${version}</SdkVersion>

    <Title>resharper_unreal</Title>
  </PropertyGroup>
</Project>"""
}

task compileDotNet {
    dependsOn findMsBuild
    dependsOn patchPropsFile
    doLast {
        exec {
            executable findMsBuild.executable
            args "/t:Restore;Rebuild","$dotnetSolution","/v:minimal","/p:Configuration=$BuildConfiguration"
        }
    }
}


buildPlugin {
    dependsOn findMsBuild
    outputs.upToDateWhen { false }
    doLast {
        copy {
            from "$buildDir/distributions/$rootProject.name-${version}.zip"
            into "$rootDir/output"
        }

        def changelogText = file("$repoRoot/CHANGELOG.md").text
        def changelogMatches = changelogText =~ /(?s)(-.+?)(?=##|$)/
        def changeNotes = changelogMatches.collect {
            it[1].replaceAll(/(?s)- /, "\u2022 ").replaceAll(/`/, "").replaceAll(/,/, "%2C")
        }.take(1).join("")

        exec {
            executable findMsBuild.executable
            args "/t:Pack","$dotnetSolution","/v:minimal","/p:Configuration=$BuildConfiguration","/p:PackageOutputPath=$rootDir/output","/p:PackageReleaseNotes=$changeNotes","/p:PackageVersion=$version"
        }
    }
}

intellij {
    type = 'RD'
    version = "$sdkVersion-SNAPSHOT"
    downloadSources = false
}

apply plugin: 'com.jetbrains.rdgen'
apply from: 'model.gradle'

patchPluginXml {
    def changelogText = file("$repoRoot/CHANGELOG.md").text
    def changelogMatches = changelogText =~ /(?s)(-.+?)(?=##|$)/

    changeNotes = changelogMatches.collect {
        it[1].replaceAll(/(?s)\r?\n/, "<br />\n")
    }.take(1).join('')
}

prepareSandbox {
    dependsOn compileDotNet
    def outputFolder = "$dotNetDir/${dotNetRootId}.${dotNetSolutionId}/bin/${dotNetPluginId}/$BuildConfiguration"
    def dllFiles = [
            "$outputFolder/${dotNetPluginId}.dll",
            "$outputFolder/${dotNetPluginId}.pdb"
    ]

    dllFiles.forEach({ f ->
        def file = file(f)
        from(file, { into "$intellij.pluginName/dotnet" })
    })

    doLast {
        dllFiles.forEach({ f ->
            def file = file(f)
            if (!file.exists()) throw new RuntimeException("File $file does not exist")
        })
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}